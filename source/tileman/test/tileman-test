server {
  listen 80;
  server_name localhost tileserver;
  root   /var/lib/tileman/www;

  access_log  /var/log/nginx/tileman_test_access.log combined;
  error_log   /var/log/nginx/tileman_test_error.log debug;
  
  location /javascript/ {
    root /usr/share/;
  }

  location = /favicon.ico {
     log_not_found off;
     access_log off;
  }

  location / {
    root /var/www;
    try_files $uri $uri/ @tileserver;
  }

  location @tileserver {
    access_by_lua '
      local osm_tile = require "osm.tile"
      local osm_data = require "osm.data"
      local x, y, z = osm_tile.get_cordination(ngx.var.uri, "", "png")
      if z < 8 then -- low zoom use global site cache 
        ngx.exec("@tilecache")
      end
      local region = osm_data.get_region("taiwan")
      local inside = osm_tile.is_inside_region(region, x, y, z)
      if not inside then
         ngx.exec("@tilecache")
      end
    ';
    content_by_lua '
      -- required module
      local osm_tile = require "osm.tile"
      local tirex = require "osm.tirex"
      local math = require "math"
      local map = "custom"
      local x, y, z = osm_tile.get_cordination(ngx.var.uri, "", "png")
      -- try renderd file.
      local tilefile = osm_tile.xyz_to_metatile_filename(x, y, z)
      local tilepath = "/var/lib/tirex/tiles/"..map.."/"..tilefile
      local png, err = osm_tile.get_tile(tilepath, x, y, z)
      if png then
        ngx.header.content_type = "image/png"
        ngx.print(png)
        return ngx.OK
      end
      -- ask tirex to render it
      local priority = 1
      local maxz = math.min(19, z + 2)
      local ok = tirex.request(map, x, y, z, maxz, priority)
      if not ok then
         return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      end
      local png, err = osm_tile.get_tile(tilepath, x, y, z)
      if png then
        ngx.header.content_type = "image/png"
        ngx.print(png)
        return ngx.OK
      end
      return ngx.exit(ngx.HTTP_NOT_FOUND)
    '; 
  }

  location @tilecache {
    include tileman_proxy_params;
    proxy_pass http://openstreetmap_backend;
  }
}
