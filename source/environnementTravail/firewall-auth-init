#!/bin/sh
# kFreeBSD do not accept scripts as interpreters, using #!/bin/sh and sourcing.
if [ true != "$INIT_D_SCRIPT_SOURCED" ] ; then
    set "$0" "$@"; INIT_D_SCRIPT_SOURCED=true . /lib/init/init-d-script
fi
### BEGIN INIT INFO
# Provides:          firewall-auth
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Connexion a travers Firewall
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.  This example start a
#                    single forking daemon capable of writing a pid
#                    file.  To get other behavoirs, implemend
#                    do_start(), do_stop() or other functions to
#                    override the defaults in /lib/init/init-d-script.
### END INIT INFO

# Author: Foo Bar <foobar@baz.org>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.
PATH=/usr/sbin:/usr/bin:/sbin:/bin:/home/fred/bin
NAME="firewall-auth"
DESC="Authentification firewall"
#DAEMON=/home/fred/Travail/ecriture_sphinx/technic/source/dt-dict/bin/$NAME
DAEMON=/home/fred/Documents/install/source/environnementTravail/firewall-auth-sh/firewall-auth.sh
DAEMON_ARGS=""
#PIDFILE=/var/run/$NAME.pid
PIDFILE=/var/run/firewall-auth.pid
#SCRIPTNAME=/etc/init.d/$NAME
SCRIPTNAME=/etc/init.d/firewall-auth

#
# Function that starts the daemon/service
#
do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        log_daemon_msg "Starting system $NAME Daemon"
        #start-stop-daemon --name $NAME --start --oknodo --quiet --background --make-pidfile --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
        #        || return 1
        start-stop-daemon --start --oknodo --name $NAME --background --make-pidfile --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
                || return 1
        #start-stop-daemon --name $NAME --start --oknodo --quiet --background --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- \
        #        $DAEMON_ARGS \
        #        || return 2
        start-stop-daemon --start --oknodo --name $NAME --background --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- \
                $DAEMON_ARGS \
                || return 2
        log_end_msg $?
        # Add code here, if necessary, that waits for the process to be ready
        # to handle requests from services started subsequently which depend
        # on this one.  As a last resort, sleep for some time.
}

do_stop()
{
        log_daemon_msg "Stopping system $NAME Daemon"
        #start-stop-daemon --name $NAME --stop --oknodo --quiet --pidfile $PIDFILE --retry 5 --exec $DAEMON
        start-stop-daemon --stop --oknodo --pidfile $PIDFILE --retry 5
	log_end_msg $?
}

